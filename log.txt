0715
## 계정생성 이후 (Sign up -- create view)
1. 로그인 되어있을 때 조건문을 통해 다른 페이지 요청
!! (if not user.is_authenticated('...:...'))
2. bootstrap4 공식 docs에서 installation, quick start
!! pip install django-bootstrap4
!! settings.py 에 bootstrap4 추가
3. bootstrap 로드 후 html 문서 수정(create, login)
!! css 파일 클래스 추가 후 변경 후 브라우저가 변하지 않는다면 캐쉬 문제
4. 네이버 글꼴 추가
!! static >> fonts 하위 폴더 생성 >> otf파일 추가
!! head에 style 태그 추가
!! body 태그에 font-family 변경 나눔스퀘어
5. 세팅즈에서 랭귀지모드 변경 (한글을 원한다면)
!! setting >> lan-mode : 'ko-kr'

CRUD 에서 Login View 까지 완성
Detail view 제작 (Read View)
>>요청을보내는 유저 , 보려는 유저<<
유저 고유 키값(pk)을 서버에서 확인하고
해당 유저 정보를 HTML 문서상에 출력
!! context_object_name을 통해 html 상에서 정보

6. view >> detailview add >> url에 path 추가 >> html 파일생성
!! view 에서 detailview 클래스 생성
!! path 추가시 클래스 기반 view는 .as_view()필수입력

7. header에서 로그인 했을 때 마이페이지 탭 추가
!! detail.html
-----------------------------------------------------------------

0719
CRUD에서 Update view 제작
1. view.py에서 class 생성 (UpdateView)
!! User 객체 그대로 사용
!! context_object_name은 target_user
2. url에 path 추가
!! url에서 appname : name 에서 name에 들어가는 값이 우리가 지정한 name 값
3. update.html 제작
!! 틀은 create.html과 유사
4. detail.html 수정
!! mypage에 회원정보 수정 버튼 추가

5. Delete 뷰 생성 방법은 동일.

6. user의 pk만 알면 누구나 마이페이지 수정 버튼 접근 가능.
!! 따라서 if user == target_user 구문을 통해
!! 해당 유저만 접근하게끔 설정
-----------------------------------------------------------------

0720
기존 부분에서 엉성한 부분 수정
1. detail.html에서 사용자 아이디 바꾸는 부분 비활성화
!! view.py에서 UserCreationForm이 기존 폼 >> ctrl+B로 확인
!! 상속을 통해 form을 커스터마이징 >>forms.py에서 생성
!! 부모클래스와 동일한 클래스 생성 >> super()이용
!! 항상 서버를 만든다고 생각하고 튼튼한 서버를 구축해야한다.

**
Get : inquiry
Post : create, update
**

header에서 조건문 분기한것 처럼
2. user.is_authenticated를 통해 로그인이 안됐을경우 login 페이지로 이동
!! helloworld def 수정 후 views.py에서 조건문 분기를 추가 후 else 리다이렉트
!! update, Delete 클래스도 마찬가지로 바꿈

3. 하지만 로그인이 되어있는것만 확인했음
!! 즉, 4번유저로 로그인을하면 5번유저 디테일도 들어갈 수 있음
!! 위에 작성한 조건에 self.get_object == request.user를 and로 연결
!! 이번엔 HttpResponseForbidden을 리턴

4. decorator는 함수를 인자로 받음
!! 인자로 받은 함수 앞 뒤를 꾸며줌
-----------------------------------------------------------------

0722
1. view.py 첫번째 user.is)authentic ... 지우고 deco 생성
!! 장고에서 제공해주는 login_required 이용
!! 장고에서 기본적으로 /accounts/login/ 이 default이지만
   경로 변경이 필요할 시(login_url = reverse_lazy('account:login'))사용

2. 메소드에서(클래스의 함수) 데코를 적용할 경우
!! 데코를 변환을 하거나 애초에 메소드를 위한 데코를 만들어야함
!! 하지만 장고에서 이것도 제공해줌 method_decorator