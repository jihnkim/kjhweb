0715
## 계정생성 이후 (Sign up -- create view)
1. 로그인 되어있을 때 조건문을 통해 다른 페이지 요청
!! (if not user.is_authenticated('...:...'))
2. bootstrap4 공식 docs에서 installation, quick start
!! pip install django-bootstrap4
!! settings.py 에 bootstrap4 추가
3. bootstrap 로드 후 html 문서 수정(create, login)
!! css 파일 클래스 추가 후 변경 후 브라우저가 변하지 않는다면 캐쉬 문제
4. 네이버 글꼴 추가
!! static >> fonts 하위 폴더 생성 >> otf파일 추가
!! head에 style 태그 추가
!! body 태그에 font-family 변경 나눔스퀘어
5. 세팅즈에서 랭귀지모드 변경 (한글을 원한다면)
!! setting >> lan-mode : 'ko-kr'

CRUD 에서 Login View 까지 완성
Detail view 제작 (Read View)
>>요청을보내는 유저 , 보려는 유저<<
유저 고유 키값(pk)을 서버에서 확인하고
해당 유저 정보를 HTML 문서상에 출력
!! context_object_name을 통해 html 상에서 정보

6. view >> detailview add >> url에 path 추가 >> html 파일생성
!! view 에서 detailview 클래스 생성
!! path 추가시 클래스 기반 view는 .as_view()필수입력

7. header에서 로그인 했을 때 마이페이지 탭 추가
!! detail.html
-----------------------------------------------------------------

0719
CRUD에서 Update view 제작
1. view.py에서 class 생성 (UpdateView)
!! User 객체 그대로 사용
!! context_object_name은 target_user
2. url에 path 추가
!! url에서 appname : name 에서 name에 들어가는 값이 우리가 지정한 name 값
3. update.html 제작
!! 틀은 create.html과 유사
4. detail.html 수정
!! mypage에 회원정보 수정 버튼 추가

5. Delete 뷰 생성 방법은 동일.

6. user의 pk만 알면 누구나 마이페이지 수정 버튼 접근 가능.
!! 따라서 if user == target_user 구문을 통해
!! 해당 유저만 접근하게끔 설정
-----------------------------------------------------------------

0720
기존 부분에서 엉성한 부분 수정
1. detail.html에서 사용자 아이디 바꾸는 부분 비활성화
!! view.py에서 UserCreationForm이 기존 폼 >> ctrl+B로 확인
!! 상속을 통해 form을 커스터마이징 >>forms.py에서 생성
!! 부모클래스와 동일한 클래스 생성 >> super()이용
!! 항상 서버를 만든다고 생각하고 튼튼한 서버를 구축해야한다.

**
Get : inquiry
Post : create, update
**

header에서 조건문 분기한것 처럼
2. user.is_authenticated를 통해 로그인이 안됐을경우 login 페이지로 이동
!! helloworld def 수정 후 views.py에서 조건문 분기를 추가 후 else 리다이렉트
!! update, Delete 클래스도 마찬가지로 바꿈

3. 하지만 로그인이 되어있는것만 확인했음
!! 즉, 4번유저로 로그인을하면 5번유저 디테일도 들어갈 수 있음
!! 위에 작성한 조건에 self.get_object == request.user를 and로 연결
!! 이번엔 HttpResponseForbidden을 리턴

4. decorator는 함수를 인자로 받음
!! 인자로 받은 함수 앞 뒤를 꾸며줌
-----------------------------------------------------------------

0722
1. view.py 첫번째 user.is)authentic ... 지우고 deco 생성
!! 장고에서 제공해주는 login_required 이용
!! 장고에서 기본적으로 /accounts/login/ 이 default이지만
   경로 변경이 필요할 시(login_url = reverse_lazy('account:login'))사용

2. 메소드에서(클래스의 함수) 데코를 적용할 경우
!! 로그인이 되었는지 확인 하는 데코
!! 데코를 변환을 하거나 애초에 메소드를 위한 데코를 만들어야함
!! 하지만 장고에서 이것도 제공해줌 method_decorator(사용할데코)
!! 로그인이 되었을 때 다른 아이디의 update, delete 페이지를 막는 데코도 따로 작성
!! 추가적으로 데코레이터들을 리스트에 넣어서 간단하게 표현가능함

3. server 에서 admin 계정 생성
!! python manage.py creatsuperuser 터미널에 입력
!! superuser을 DB에서 확인

4. 프로필 생성
!! setting.py 에서 STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
!! Media 역시 동일하게 생성하고 디렉토리 수정

-----------------------------------------------------------------

0726
1. profile app 만들기
!! 이미지, 닉네임, 메시지 기능 만들거임
!! 딜리트, 디테일 뷰는 작성 x
!! 프로필은 따로 form을 만들어야 함
!! 터미널에서 python manage.py startapp profileapp
!! app 생성후 메인앱 세팅에서 installed app 목록 추가
!! 메인 앱 urls에서 path 추가
!! model을 먼저 만들어두고 작업

2. model 만들기
!! profileapp models.py 에서Profile 클래스 생성
!! user 객체의 OneToOneField에서 on_delete 옵션의 cascade(종속) 설정
!! image, nickname, message 객체 생성
!! 다작성했으면 migration 작업 필수 !
!! pip install pillow 해야함 (image를 다루기 때문)
!! ** 모델을 변경할 때 마다 터미널에서
   makemigrations(장고가 모델변경을 감지하고 DB 스키마에 변화를 적용하는 방법), migrate
!! 완료 후 DB에 프로필 db 확인

3. form 만들기
!! Meta 정보 >> form이 어떻게 작성되는 지 외부적인 정보를 담음
!! forms.py 생성 후 field에 image, nickname, message 입력
!! user의 경우는 서버에서 직접 관리(요청을 보낸 유저 확인)

4. view 만들기
!! CBV(클래스 기반 뷰)생성
!! urls 에서 path 추가

5. templates 만들기
!! templates디렉토리 하위 profileapp 디렉토리 생성
!! create.html 생성 후 accountapp의 create복붙 후 경로 수정
!! create.html 에 form action 에서 enctype설정(인코딩타입)
   파일을 보낼 수 있게 해주는 속성임
-----------------------------------------------------------------

0727
1. profile/create 페이지에서 양식 제출시 무결성오류 해결
!! 폼에서 3개를 입력받게 했는데 실제로 모델엔 4개임
!! 즉 user 설정이 필요함 하지만 user까지 입력 받게한다면 착한 요청만 있지는 않을 것임
!! 기존 모델의 검증이후에 추가적으로 검증이 필요할 때,
!! view.py에서 profilecreateview 이하에 form_valid 추가
!! form.instance.user 가 요청을 보내는 유저임을 알려주는 구문 추가
!! ** DB에는 이미지가 저장되지 않음
   >> 메인 앱에서 미디어들이 어디에 저장 될 지 설정 해놨었음
   >> profile 앱 model.py에 image = models.ImageField(upload_to='profile/',
   라는 설정으로 인해 profile/ 카테고리가 생성됨

2. account의 detail을 꾸며야함
!! detail.html에서 자기가 변경한 닉네임, 메시지 등을 보이게 함
!! profile.nickname 이렇게 어떻게 불러왔나?
   >> profileapp model.py에서 related_name에 profile이라 설정했었음
!! 이미지 소스를 입력했지만 제대로 불러오지 못함?
   >> 메인앱 url에서 static 메소드 추가
!! 사진이 너무 크니까 조절하자 class="profile_image" 생성
   >> 이후 base.css 에서 수정하자

3. updateview 생성
!! 기존 패턴과동일
   >>view 생성 > 라우터 연결(path 추가 시 pk키 입력)> html 생성
   >>edit anchor tag도 detail 페이지에 추가

-----------------------------------------------------------------

0729
1. 어카운트 디테일>> 에디트 페이지 로그아웃 된 상태에서 보임
!! if 문 추가

2. 동적 (pk 값을 받았을 때), 자신의 프로필로 돌아가게 설정하는 방법
!! 기존 profile update view 에서 success url 지우고 메서드 생성
!! self.object 는 target_profile 과 같다고 보면 됨 user는 프로필에 연결된 유저
!! accountapp view에 update 클래스에도 메서드 오버라이딩 (def get_suc ...)
   accountapp의 클래스에서 suc 메서드의 kwargs 경우는 object.pk 만 써도 ㄱㅊ

3. account app 처럼 인증과정 생성 (decorator 사용)
!! @method_decorator() 사용하여 profile creatview 꾸밈
!! update view는 decorator 직접 제작  def decorated(request, *args, **kwargs):
   def get(): 사용하여 매개변수 컨닝가능
!! DB에 접근할 떄 해당 모델의 클래스에 접근 Profile.objects.get(pk=kwargs['pk'])
!! 완려되면 데코레이터 클래스위에 작성

4. Edit, info update 등 버튼 디자인 해보귀
!! material icons 검색 >> github >> using font 태그 헤드에 추가
!! detail html 에서 class = "material-icons" 추가
!! 추가적으로 클래스 생성해서 추가수정
   .round_button:hover 는 아이콘 위에 커서 올릴 때 색변화
!! 기존 date.join 지우고 update info, quit 버튼으로 변경

5. article 작성
!! Magic grid 검색 -- 확인
!! 터미널에서 startapp articleapp
   항상 앱만들고 메인앱 인스톨앱 세팅, url path 추가
   article app에 urls.py 생성 path 설정
!! list.html 에 magicgrid 내용추가
-----------------------------------------------------------------

0802
1. magic grid javascript 추가
!! 복붙할 때 맨마지막줄 module.ex .. 삭제
!! js 파일 html로 불러올 때 load static
!! js magic grid 소스(js/magicgrid.js)
   https://github.com/e-oj/Magic-Grid/blob/master/dist/magic-grid.cjs.js
!! js fiddle 소스 (list.html)
   https://jsfiddle.net/eolaojo/4pov0rdf/
!! list.html 에 js 외부 소스 추가 시 <script src> 구문 사용

2. 더미 이미지 넣어보기
!! 로렘 픽섬 검색
!! https://picsum .. url 추가
!! list html 높이 속성 전부 삭제

3. 이미지가 로드 될 때마다 레이아웃 재배치
!! magicgrid.js 에 javascirpt code 작성

4. model 작성
!! 1 대 다로 연결해 줄 수있는 Foreignkey
   article과 user를 연결 1대다
   OneToOne은 1대1
!! model 생성 후 항상 마이그레이션 작업
!! makemigration : 변화 측정
   migrate : 변화를 DB schema에 실제 반영

5. form 생성
-----------------------------------------------------------------

0803
1. view생성 ..
!! view 생성 urls 수정 create html 생성
!! html에서 enctype 꼭 넣어줘야함
!! article create 페이지에서 제출시 DB에 정보가 쌓임
!! 이때 DB에 foriegn 키가 null일 떄 서버에서 따로 처리를해줘야함
   >>view 에서 form valid 추가
   >>form.instance.writer = self.request.user
   >>글쓴이가 누군지 확인

2. detail view 작성
!! view 생성 urls 수정 detail html ..
!! detail 은 urls path추가시 pk 값 꼭 작성
!! target_article.writer.profile.nickname
   >> writer 만 쓰게 되면 객체자체만 반환
   >> 따라서 profile의 nickname을 가져와야함

** html 꿀팁 맨 바탕에 예를들어 img 누르고 tab하면 자동태그완성
   img.container 후 tab 누르면 class 생성

3. update view 작성
!! view 에서 동적으로 url 리턴
!! self.object >> target_article
!! detail html에서 update로 향하는 앵커태그 생성
!! update 주소 라우팅 시 pk 값 항상 입력

4. delete view 작성
!!
-----------------------------------------------------------------

0805
1. 인증과정제작 (데코레이터)
!! 여지껏 했던 것처럼 데코레이터 생성
!! create view에서 양식완성시 detail페이지로 success_url 되는게 자연스러움
!! update와 delete 에서는 데코레이터 재정의

2. detail page 디자인 수정
!! detail.html, base.css 수정

3. List view 만들기(+pagination)
!! view 생성 > url 수정 >

-----------------------------------------------------------------

0809

1. List html 에서 pagination 기능 추가
!! page_obj 속성 이용 이전, 현재, 다음페이지 표시
!! 조건문 분기 활용
!! 코드가 길어지니까 include 구문 사용

2. detail page에서 comment 기능
!! create view와 detail view 의 차이
>> no object <--> no form
!! detail에 댓글을 입력해야하는데 view에 form이 없다
!! mixin 기능 이용(article detail view에서 다중 상속)
!! comment app 제작
!! setting > 메인앱 url > 커맨트 앱 url > model > form
!! 마이그래이션도

-----------------------------------------------------------------

0810
1. 서버에서 처리해야할 사항 (article, writer)
!! comment_app comment DB
!! commentcreateview에 form valid 추가
   request 보내는 유저가 instance의 writer
   article의 경우 create.html문에서 식별하기위한 input tag 생성
   이 때 value가 target_article.pk로 설정될 수 있는 이유는
   articleapp detail.html에서 include를 사용했으므로 똑같이 사용가능
   * 아직 client 측에서 조작이 가능하다 (pk값 f12로 변경 가능)

** 에러 팁 : 로그인되어있지 않을 때 종종 발생 : simplelazyobject

2. CommentDeleteView 작성
!! view, url, html 만들기

3. 댓글시각화
!! article detail.html에서 작성
!! article의 related_name이 comment이므로 comment로 접근
!! span tag 2개 (이름, 날짜) 밑 div tag에 comment 출력
!! css에 클래스 저장

4. 인증과정 데코레이터 만들기
!! decorators.py

5. 이후 comment delete 버튼 생성
!! 러그아웃 햇을 때 버튼 안보이게 조건문분기도 추가

-----------------------------------------------------------------

0812
1. 모바일 디버깅
!! 반응형 디자인 설계 과정
!! NGROK 이라는 외부 프로그램 사용 (Tunneling program)
   이 프로그램을 실행하면 로컬에서 돌리는 서버를 외부에 노출시킬 수 있음
!! 메인프로젝트 디렉토리에 exe 파일 다운 후 추가
   터미널에서 ngrok http 포트번호  입력
   settings 에서 allowed_hosts 에 '*' 추가
!! Responsive Design
   head.html에 메타태그 추가
   모바일에서 두개아티클이 출력되게 조정
   >> magic grid.js gutter: 12로 수정
   >> list.html 컨테이너 박스 수정
!! base.css 에서 @media 쿼리를 통해 screen이 500px 밑으로 떨어지면
   전체 폰트크기를 줄여줌 --> 하위 폰트 사이즈들이 rem으로 설정되어서 자동으로 맞춰짐

2. project 앱 만들기
!! 터미널에서 생성

-----------------------------------------------------------------

0817

1. model 생성
!! 생성 후 마이그레이션 작업

2. form 생성

3. 똑같은 패턴 반복
